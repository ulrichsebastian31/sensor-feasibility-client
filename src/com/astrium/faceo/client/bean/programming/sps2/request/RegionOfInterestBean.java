package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)RegionOfInterestBean.java	 1.0  20/04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  :  This class is used to specify the desired geographical region of interest that should be acquired * by the satellite. A user may specify the value of a Region of Interest by using either a * polygon or a circle. *  * In this implementation we only use a rectangle for the polygon. * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 20/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of Region of Interest for GetFeasibility Request *  *	<eo:RegionOfInterest> *	   <eo:Polygon> *	       <eo:Exterior elementCount="5"> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>61.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>61.0</eo:Lat> *	               <eo:Lon>61.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>61.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	       </eo:Exterior> *	   </eo:Polygon> *	</eo:RegionOfInterest> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * This class is used to specify the desired geographical region of interest that should be acquired * by the satellite. A user may specify the value of a Region of Interest by using either a * polygon or a circle. *  * In this implementation we only use a rectangle for the polygon. * </P> <BR> *  *  sample of Region of Interest for GetFeasibility Request *  *	<eo:RegionOfInterest> *	   <eo:Polygon> *	       <eo:Exterior elementCount="5"> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>61.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>61.0</eo:Lat> *	               <eo:Lon>61.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>61.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	           <eo:Point> *	               <eo:Lat>60.0</eo:Lat> *	               <eo:Lon>60.0</eo:Lon> *	           </eo:Point> *	       </eo:Exterior> *	   </eo:Polygon> *	</eo:RegionOfInterest> *  * @author  GR * @version 1.0, le 20/04/2010 */public class RegionOfInterestBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = -1918773098377104037L;		// ---------------- Polygon ---------------------	/** Polygon : only rectangle for this implementation */		/** leftUpper position of Area Of Interest */	private double leftUpper = 0;		/** rightUpper position of Area Of Interest */	private double rightUpper = 0;		/** leftLower position of Area Of Interest */	private double leftLower = 0;		/** rightLower position of Area Of Interest */	private double rightLower = 0; 	// ---------------- Circle ---------------------	/** latitude of circle's center point */	private double circleCenterLat = 0; 	/** longitude of circle's center point */	private double circleCenterLon = 0; 	/** radius of the circle */	private double circleRadius = 0; 	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public RegionOfInterestBean() {	}	/** getters */		// ---------------- Polygon ---------------------	/** Polygon : only rectangle for this implementation */		/** 	 * getter on leftUpper	 * 	 * @return double : left Upper	*/ 	public double getLeftUpper() {		return this.leftUpper;	}	/** 	 * getter on rightUpper	 * 	 * @return double : right Upper	*/ 	public double getRightUpper() {		return this.rightUpper;	}		/** 	 * getter on leftLower	 * 	 * @return double : left Lower	*/ 	public double getLeftLower() {		return this.leftLower;	}	/** 	 * getter on rightLower	 * 	 * @return double : right Lower	*/ 	public double getRightLower() {		return this.rightLower;	}		// ---------------- Circle ---------------------	/** 	 * getter on circleCenterLat	 * 	 * @return double : latitude of circle's center point	*/ 	public double getCircleCenterLat() {		return this.circleCenterLat;	}	/** 	 * getter on circleCenterLon	 * 	 * @return double : longitude of circle's center point	*/ 	public double getCircleCenterLon() {		return this.circleCenterLon;	}	/** 	 * getter on circleRadius	 * 	 * @return double : circle's radius	*/ 	public double getCircleRadius() {		return this.circleRadius;	}	/** setters */	// ---------------- Polygon ---------------------	/** Polygon : only rectangle for this implementation */		/** 	 * setter on leftUpper	 * 	 * @param _leftUpper (double): left Upper value	*/	public void setLeftUpper(double _leftUpper) {		this.leftUpper = _leftUpper;	}	/** 	 * setter on rightUpper	 * 	 * @param _rightUpper (double): right Upper value	*/	public void setRightUpper(double _rightUpper) {		this.rightUpper = _rightUpper;	}	/** 	 * setter on leftLower	 * 	 * @param _leftLower (double): left Lower value	*/	public void setLeftLower(double _leftLower) {		this.leftLower = _leftLower;	}	/** 	 * setter on rightLower	 * 	 * @param _rightLower (double): right Lower value	*/	public void setRightLower(double _rightLower) {		this.rightLower = _rightLower;	}	// ---------------- Circle ---------------------	/** 	 * setter on circleCenterLat	 * 	 * @param _circleCenterLat (double): latitude of circle's center point	*/ 	public void setCircleCenterLat(double _circleCenterLat) {		this.circleCenterLat = _circleCenterLat;	}		/** 	 * setter on circleCenterLon	 * 	 * @param _circleCenterLon (double): latitude of circle's center point	*/ 	public void setCircleCenterLon(double _circleCenterLon) {		this.circleCenterLon = _circleCenterLon;	}	/** 	 * setter on circleRadius	 * 	 * @param _circleRadius (double): latitude of circle's center point	*/ 	public void setCircleRadius(double _circleRadius) {		this.circleRadius = _circleRadius;	}	} // class