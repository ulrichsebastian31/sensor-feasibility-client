package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)StereoscopicAcquisitionBean.java	 1.0  20/04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 20/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * Acquisition Type informations : * The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * </P> * </P> <BR> *  * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> *  * @author  GR * @version 1.0, le 20/04/2010 */public class StereoscopicAcquisitionBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 3129444195443277107L;	/** 	 * coverage type 	 * Specifies if the imagery should be acquired in one or multiple passes.	 * SINGLE_SWATH: The region of interest should be covered by a single segment.	 * MONOPASS: The region of interest must be covered by one or more	 * segments acquired from the same orbit (some agile satellites can cover	 * large zones even when satisfying this constraint).	 * MULTIPASS: The region of interest can be covered by using images	 * extracted from several segments acquired at different dates provided	 * that they are all acquired within the requested time period	 */	private String coverageType = null;		/**	 * BHRatio :	 * Ratio between base and height of the triangle constructed by	 * viewing directions of the two acquisitions in a stereoscopic	 * couple, and the local horizontal plane.	 */	private float bHRatio = 0;		/**	 * MaxCoupleDelay : (days)	 * Maximum time delay between two acquisitions of a stereoscopic couple.	 */	private float maxCoupleDelay = 0;	/** 	 * acquisition angle : 	 *           choice : incidence angle range or pointing angle range	 * Acceptable acquisition angles can be specified either by indicating a range of incidence	 * angles (i.e. the angle with which the look vector intersects the earth surface) or a range of	 * pointing angles (i.e. the angle of the look vector in the nadir oriented frame of reference	 * attached to the satellite).	 */		/** 	 * incidence angle range :	 * Specification of allowed acquisition angles in terms of angles expressed relative to a	 * frame of reference attached to the location of the acquisition (i.e. on the ground).		 */		/**	 * Azimuth Range :	 * Range of acceptable azimuth incidence angles. 	 * The azimuth angle is the angle that the look vector (projected vertically on the earth surface) 	 * makes with the north direction. It thus indicates from which geographic direction (i.e. North, East, West,	 * South) the region of interest should be imaged.	 */		/**	 * Pointing Angle Range :	 * Specification of allowed acquisition angles in terms of angles expressed in the satellite	 * reference frame and relative to the nadir direction..	 */	/**	 * Elevation Range :	 * 	 * Range of acceptable elevation incidence angles. 	 * The elevation angle is the angle that the look vector makes	 * with the local vertical. It thus indicates how vertically the region should be imaged.	 * This is the traditional meaning of incidence angle	 */	private AcquisitionAngleRangeBean acquisitionAngle1 = new AcquisitionAngleRangeBean();	private AcquisitionAngleRangeBean acquisitionAngle2 = new AcquisitionAngleRangeBean();	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public StereoscopicAcquisitionBean() {	}	/** getters */		/** 	 * getter on coverageType	 * 	 * @return String : coverage type	*/	public String getCoverageType() {		return (this.coverageType != null) ? this.coverageType : "";	}		/** 	 * getter on bHRatio	 * 	 * @return float : BHRatio	*/	public float getbHRatio() {		return this.bHRatio;	}	/** 	 * getter on maxCoupleDelay	 * 	 * @return float (days) : maxCoupleDelay	*/	public float getMaxCoupleDelay() {		return this.maxCoupleDelay;	}		/**  acquisition angle : Azimuth Range ane Elevation Range */		/** 	 * getter on acquisitionAngle1	 * 	 * @return AcquisitionAngleRangeBean : acquisition Angle 1	*/	public AcquisitionAngleRangeBean getAcquisitionAngle1() {		return this.acquisitionAngle1;	}		/** 	 * getter on acquisitionAngle2	 * 	 * @return AcquisitionAngleRangeBean : acquisition Angle 2	*/	public AcquisitionAngleRangeBean getAcquisitionAngle2() {		return this.acquisitionAngle2;	}		/** setters */	/** 	 * setter on coverageType	 * 	 * @param _coverageType (String): coverage Type value	*/	public void setCoverageType(String _coverageType) {		this.coverageType = _coverageType;	}		/** 	 * setter on bHRatio	 * 	 * @param _bHRatio (float): BHRatio value	*/	public void setbHRatio(float _bHRatio) {		this.bHRatio = _bHRatio;	}	/** 	 * setter on maxCoupleDelay	 * 	 * @param _maxCoupleDelay (float): max Couple Delay value (days)	*/	public void setMaxCoupleDelay(float _maxCoupleDelay) {		this.maxCoupleDelay = _maxCoupleDelay;	}	/** 	 * setter on acquisitionAngle1	 * 	 * @param _acquisitionAngle1 (AcquisitionAngleRangeBean): acquisition Angle 1 value	*/	public void setAcquisitionAngle1(AcquisitionAngleRangeBean _acquisitionAngle1) {		this.acquisitionAngle1 = _acquisitionAngle1;	}	/** 	 * setter on acquisitionAngle2	 * 	 * @param _acquisitionAngle2 (AcquisitionAngleRangeBean): acquisition Angle 2 value	*/	public void setAcquisitionAngle2(AcquisitionAngleRangeBean _acquisitionAngle2) {		this.acquisitionAngle2 = _acquisitionAngle2;	}} // class