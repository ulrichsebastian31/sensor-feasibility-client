package com.astrium.faceo.client.bean.programming.sps2.responses;/* * @(#)Sps2SegmentBean.java	 1.0  17/05/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : Cette classe est un conteneur d'informations pour les r&eacute;sultats  * de l'op&eacute;ration 'GetFeasibility' * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 17/05/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * */// importimport java.io.Serializable;import java.util.HashMap;import java.util.Map;import com.astrium.faceo.client.bean.programming.sps2.request.AcquisitionAngleRangeBean;/** * <B>SITE FACEO</B> <BR> *  * <P> * Cette classe est un conteneur d'informations pour les r&eacute;sultats * de l'op&eacute;ration 'GetFeasibility' * </P> * </P> *  * @author  GR * @version 1.0, le 17/05/2010 */public class SegmentBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 5823215945803847059L;	/** id Cartography 	 * identifiant de l'emprise retourn&eacute; par l'applet WWJ	 * lorqu'elle est cr&eacute;sent&eacute;e	 * sur la cartographie de type World Wind Java	 */	private int idCartography = -1;	/** show On Cartography 	 * true si la scenne est affich&egrave;e	 * sur la repr&eacute;sentation cartographique	 */	private boolean showOnCartography = false;	/** sensor Id */	private String sensorId = null;		/** id */	private String id = null;	/** status */	private String status = null;	/** platform identifier */	private String platformId = null;		/** platform name */	private String platformName = null;		/** instrument identifier */	private String instrumentId = null;		/** instrument name */	private String instrumentName = null;		/** instrument Mode */	private String instrumentMode = null;		/** acquisition start Time */	private String acquisitionStart = null;		/** acquisition stop Time */	private String acquisitionStop = null;		/** 	 * acquisition angle : 	 *           choice : incidence angle range or pointing angle range	 * Acceptable acquisition angles can be specified either by indicating a range of incidence	 * angles (i.e. the angle with which the look vector intersects the earth surface) or a range of	 * pointing angles (i.e. the angle of the look vector in the nadir oriented frame of reference	 * attached to the satellite).		 * incidence angle range :	 * Specification of allowed acquisition angles in terms of angles expressed relative to a	 * frame of reference attached to the location of the acquisition (i.e. on the ground).			 * Azimuth Range :	 * Range of acceptable azimuth incidence angles. 	 * The azimuth angle is the angle that the look vector (projected vertically on the earth surface) 	 * makes with the north direction. It thus indicates from which geographic direction (i.e. North, East, West,	 * South) the region of interest should be imaged.		 * Pointing Angle Range :	 * Specification of allowed acquisition angles in terms of angles expressed in the satellite	 * reference frame and relative to the nadir direction..	 * Elevation Range :	 * 	 * Range of acceptable elevation incidence angles. 	 * The elevation angle is the angle that the look vector makes	 * with the local vertical. It thus indicates how vertically the region should be imaged.	 * This is the traditional meaning of incidence angle	 */	private AcquisitionAngleRangeBean acquisitionAngleRange = new AcquisitionAngleRangeBean();	/** polygon's points (rectangle) */ 	/** geoLocation XML element */	// coordonnees (latitude, longitude) des 5 points representant la scene	// sous la forme GML	private String pointsXML = null;		/**	 * polygon : the 5 points of the rectangle	 */	private Map<Integer, PointBean> points = 		new HashMap<Integer, PointBean>();		/** orbit number */	private double orbitNumber = -1;	/** track number */	private double trackNumber = -1;	/** frame Number */	private double frameNumber = -1;	/** preview URL */	private String previewUrl = null;	/** stereo Segment Id */	private String stereoSegmentId = null;		/** ----------------------- OPTICAL sensor ----------------------- */	/** luminosity */	private float luminosity = 0;		/** ----------------------- RADAR (SAR) sensor ----------------------- */	/** polarization Mode */	private String polarizationMode = null;	/**	 * d&eacute;but des m&eacute;thodes	 	 * 	 * Constructeur par d&eacute;faut : vide : convention Bean	 */	/**	 * Default Constructor. The Default Constructor's explicit declaration	 * is required for a serializable class. (GWT)	 */	public SegmentBean() {	}	/** ----------------------- getters ----------------------- */	/** 	 * getter on idCartography	 * 	 * @return int : cartography identifier	 */	public int getIdCartography() {		return this.idCartography;	}	/** 	 * getter on showOnCartography	 * 	 * @return boolean : true if mapped on cartography	 */	public boolean getShowOnCartography() {		return this.showOnCartography;	}	/** 	 * getter on sensorId	 * 	 * @return String : sensor identifier	 */	public String getSensorId() {		return (this.sensorId != null) ? this.sensorId : "";	}	/** 	 * getter on id	 * 	 * @return String : identifier	 */	public String getId() {		return (this.id != null) ? this.id : "";	}	/** 	 * getter on status	 * 	 * @return String : status	 */	public String getStatus() {		return (this.status != null) ? this.status : "";	}	/** 	 * getter on platform identifier	 * 	 * @return String : platformId	 */	public String getPlatformId() {		return (this.platformId != null) ? this.platformId : "";	}		/** 	 * getter on platform name	 * 	 * @return String : platformName	 */	public String getPlatformName() {		return (this.platformName != null) ? this.platformName : "";	}	/** 	 * getter on instrumentId	 * 	 * @return String : instrument identifier	 */	public String getInstrumentId() {		return (this.instrumentId != null) ? this.instrumentId : "";	}	/** 	 * getter on instrumentName	 * 	 * @return String : instrument name	 */	public String getInstrumentName() {		return (this.instrumentName != null) ? this.instrumentName : "";	}	/** 	 * getter on instrumentMode	 * 	 * @return String : instrument Mode	 */	public String getInstrumentMode() {		return (this.instrumentMode != null) ? this.instrumentMode : "";	}	/** 	 * getter on acquisition Start	 * 	 * @return String : acquisition start Time	 */	public String getAcquisitionStart() {		return (this.acquisitionStart != null) ? this.acquisitionStart : "";	}	/** 	 * getter on acquisitionStop	 * 	 * @return String : acquisition stop Time	 */	public String getAcquisitiontop() {		return (this.acquisitionStop != null) ? this.acquisitionStop : "";	}	/**  acquisition angle : Azimuth Range ane Elevation Range */		/** 	 * getter on acquisitionAngleRange	 * 	 * @return AcquisitionAngleRangeBean : acquisition Angle Range	*/	public AcquisitionAngleRangeBean getAcquisitionAngleRange() {		return this.acquisitionAngleRange;	}	/** Points */ 	/** 	 * getter on pointsXML	 * 	 * @return String : geolocation scene XML	*/	public String getPointsXML() {		return (this.pointsXML != null) ? this.pointsXML : "";	}	/**	 * M&eacute;thode retournant la HashMap des points composant le segment	 *  	 * @return Map<Integer, Sps2PointBean>	: la HashMap	 */	public Map<Integer, PointBean> getPoints() {		return this.points;	}	/** 	 * getter on orbitNumber	 * 	 * @return double : orbit number	 */	public double getOrbitNumber() {		return this.orbitNumber;	}	/** 	 * getter on trackNumber	 * 	 * @return double : track number	 */	public double getTrackNumber() {		return this.trackNumber;	}	/** 	 * getter on frameNumber	 * 	 * @return double : frame number	 */	public double getFrameNumber() {		return this.frameNumber;	}	/** 	 * getter on previewUrl	 * 	 * @return Double : preview URL	 */	public String getPreviewUrl() {		return (this.previewUrl != null) ? this.previewUrl : "";	}	/** 	 * getter on stereoSegmentId	 * 	 * @return String : stereo segment identifier	 */	public String getStereoSegmentId() {		return (this.stereoSegmentId != null) ? this.stereoSegmentId : "";	}	/** ----------------------- OPTICAL sensor ----------------------- */ 		/** 	 * getter on luminosity	 * 	 * @return Double : luminosity	 */	public float getLuminosity() {		return this.luminosity;	}	/** ----------------------- RADAR (SAR) sensor ----------------------- */	/** 	 * getter on polarizationMode	 * 	 * @return String : polarization Mode	 */	public String getPolarizationMode() {		return this.polarizationMode;	}	/** ----------------------- setters ----------------------- */	/** 	 * setter on idCartography	 * 	 * @param _idCartography (int) : cartography identifier value	 */	public void setIdCartography(int _idCartography) {		this.idCartography = _idCartography;	}	/** 	 * setter on showOnCartography	 * 	 * @param _showOnCartography (boolean) : true if mapped on cartography	 */	public void setShowOnCartography(boolean _showOnCartography) {		this.showOnCartography = _showOnCartography;	}	/** 	 * setter on sensorId	 * 	 * @param _sensorId (String) : sensor identifier value	 */	public void setSensorId(String _sensorId) {		this.sensorId = _sensorId;	}	/** 	 * setter on id	 * 	 * @param _id (String) : identifier value	 */	public void setId(String _id) {		this.id = _id;	}	/** 	 * setter on status	 * 	 * @param _status (String) : status value	 */	public void setStatus(String _status) {		this.status = _status;	}	/** 	 * setter on platform identifier	 * 	 * @param _platformId (String) : platform identifier value	 */	public void setPlatformId(String _platformId) {		this.platformId = _platformId;	}	/** 	 * setter on platform name	 * 	 * @param _platformName (String) : platform name value	 */	public void setPlatformName(String _platformName) {		this.platformName = _platformName;	}	/** 	 * setter on instrumentId	 * 	 * @param _instrumentId (String) : instrument identifier value	 */	public void setInstrumentId(String _instrumentId) {		this.instrumentId = _instrumentId;	}	/** 	 * setter on instrumentName	 * 	 * @param _instrumentName (String) : instrument name value	 */	public void setInstrumentName(String _instrumentName) {		this.instrumentName = _instrumentName;	}	/** 	 * setter on instrumentMode	 * 	 * @param _instrumentMode (String) : instrument Mode value	 */	public void setInstrumentMode(String _instrumentMode) {		this.instrumentMode = _instrumentMode;	}	/** 	 * setter on acquisitionStart	 * 	 * @param _acquisitionStart (String) : acquisition start Time value	 */	public void setAcquisitionStart(String _acquisitionStart) {		this.acquisitionStart = _acquisitionStart;	}	/** 	 * setter on acquisitionStop	 * 	 * @param _acquisitionStop (String) : acquisition stop Time value	 */	public void setAcquisitionStop(String _acquisitionStop) {		this.acquisitionStop = _acquisitionStop;	}	/**  acquisition angle */	/** 	 * setter on acquisitionAngleRange	 * 	 * @param _acquisitionAngleRange (AcquisitionAngleRangeBean): acquisition Angle Range value	*/	public void setAcquisitionAngleRange(AcquisitionAngleRangeBean _acquisitionAngleRange) {		this.acquisitionAngleRange = _acquisitionAngleRange;	}	/** Segments */		/** 	 * setter on pointsXML	 * 	 * @param _pointsXML (String) : geoLocation scene XML value	*/	public void setPointsXML(String _pointsXML) {		this.pointsXML = _pointsXML;	}	/**	 * M&eacute;thode permettant la mise &agrave; jour de la HashMap	 * des points composant un segment	 * 	 * @param _points (Map<Integer, Sps2PointBean>)	: points's HashMap	 */	public void setPoints(			Map<Integer, PointBean> _points) {		this.points = _points;	}	/** 	 * setter on orbitNumber	 * 	 * @param _orbitNumber (double) : orbit number value	 */	public void setOrbitNumber(double _orbitNumber) {		this.orbitNumber = _orbitNumber;	}	/** 	 * setter on trackNumber	 * 	 * @param _trackNumber (double) : track number value	 */	public void setTrackNumber(double _trackNumber) {		this.trackNumber = _trackNumber;	}	/** 	 * setter on frameNumber	 * 	 * @param _frameNumber (double) : frame number value	 */	public void setFrameNumber(double _frameNumber) {		this.frameNumber = _frameNumber;	}	/** 	 * setter on previewUrl	 * 	 * @param _previewUrl (String) : preview URL value	 */	public void setPreviewUrl(String _previewUrl) {		this.previewUrl = _previewUrl;	}	/** 	 * setter on stereoSegmentId	 * 	 * @param _stereoSegmentId (String) : stereo segment identifier value	 */	public void setStereoSegmentId(String _stereoSegmentId) {		this.stereoSegmentId = _stereoSegmentId;	}	/** ----------------------- OPTICAL sensor ----------------------- */ 		/** 	 * setter on luminosity	 * 	 * @param _luminosity (float) : luminosity value	 */	public void setLuminosity(float _luminosity) {		this.luminosity = _luminosity;	}	/** ----------------------- RADAR (SAR) sensor ----------------------- */		/** 	 * setter on polarizationMode	 * 	 * @param _polarizationMode (String) : polarization Mode value	 */	public void setPolarizationMode(String _polarizationMode) {		this.polarizationMode = _polarizationMode;	}}  // class