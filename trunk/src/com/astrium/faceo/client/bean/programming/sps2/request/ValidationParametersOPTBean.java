package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)ValidationParametersOPTBean.java	 1.0  04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : Validation Parameters for SPS 2.0 OGC standard * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 14/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of ValidationParametersOPT for GetFeasibility Request *  *   <eo:ValidationParametersOPT> *       <eo:MaxCloudCover>25.0</eo:MaxCloudCover> *            <eo:MaxSnowCover>100.0</eo:MaxSnowCover> *            <eo:HazeAccepted>true</eo:HazeAccepted> *       <eo:SandWindAccepted>false</eo:SandWindAccepted> *   </eo:ValidationParametersOPT> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * Validation Parameters for SPS 2.0 OGC standard * </P> <BR> *  sample of ValidationParametersOPT for GetFeasibility Request *  *   <eo:ValidationParametersOPT> *       <eo:MaxCloudCover>25.0</eo:MaxCloudCover> *            <eo:MaxSnowCover>100.0</eo:MaxSnowCover> *            <eo:HazeAccepted>true</eo:HazeAccepted> *       <eo:SandWindAccepted>false</eo:SandWindAccepted> *   </eo:ValidationParametersOPT> * </P> *  * @author  GR * @version 1.0, le 14/04/2010 */public class ValidationParametersOPTBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 1596515721546028732L;	/** maxCloudCoverage : (from 0 to 100 : %) 	 * Maximum acceptable cloud cover. The	 * cloud cover is the portion of the image	 * area covered by clouds.	 * */	private double maxCloudCoverage = 0;	/** maxSnowCoverage : (from 0 to 100 : %) 	 *  Maximum acceptable snow coverage.	 *	The snow cover is the portion of the	 *	image area covered by snow.	 */	private double maxSnowCoverage = 0;	/** hazeAccepted : specifies if haze (brouillard) is acceptable. */	private boolean hazeAccepted = false;	/** SandWindAccepted : Specifies if sand wind is acceptable. */	private boolean sandWindAccepted = false;	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public ValidationParametersOPTBean() {	}	/** getters */		/** 	 * getter on maxCloudCoverage	 * 	 * @return double : max cloud coverage	*/	public double getMaxCloudCoverage() {		return this.maxCloudCoverage;	}	/** 	 * getter on maxSnowCoverage	 * 	 * @return double : max snow coverage	*/	public double getMaxSnowCoverage() {		return this.maxSnowCoverage;	}	/** 	 * getter on hazeAccepted : specifies if haze (brouillard) is acceptable	 * 	 * @return boolean : true if haze is accepted	*/	public boolean getHazeAccepted() {		return this.hazeAccepted;	}	/** 	 * getter on sandWindAccepted : specifies if haze (brouillard) is acceptable	 * 	 * @return boolean : true if sand wind is accepted	*/	public boolean getSandWindAccepted() {		return this.sandWindAccepted;	}		/** setters */	/** 	 * setter on maxCloudCoverage	 * 	 * @param _maxCloudCoverage (double): max cloud coverage value	*/	public void setMaxCloudCoverage(double _maxCloudCoverage) {		this.maxCloudCoverage = _maxCloudCoverage;	}	/** 	 * setter on maxSnowCoverage	 * 	 * @param _maxSnowCoverage (double): max snow coverage value	*/	public void setMaxSnowCoverage(double _maxSnowCoverage) {		this.maxSnowCoverage = _maxSnowCoverage;	}	/** 	 * setter on hazeAccepted	 * 	 * @param _hazeAccepted (boolean): true if haze is accepted	*/	public void setHazeAccepted(boolean _hazeAccepted) {		this.hazeAccepted = _hazeAccepted;	}	/** 	 * setter on sandWindAccepted	 * 	 * @param _sandWindAccepted (boolean): true if sand wind is accepted	*/	public void setSandWindAccepted(boolean _sandWindAccepted) {		this.sandWindAccepted = _sandWindAccepted;	}	} // class