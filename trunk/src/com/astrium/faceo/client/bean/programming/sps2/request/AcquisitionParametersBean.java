package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)AcquisitionParametersBean.java	 1.0  20/04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 20/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * Acquisition Type informations : * The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * </P> * </P> <BR> *  * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> *  * @author  GR * @version 1.0, le 20/04/2010 */public class AcquisitionParametersBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 1569799599704855073L;	// ---------------- OPT and SAR Acquisition Parameters ---------------------	/** fusionAccepted :	 * Specifies if imagery obtained by fusing several	 * images acquired separately and co-registered is acceptable.	 */	private boolean fusionAccepted = false;		/** instrumentMode :	 * A categorical value used to specify a particular instrument configuration. 	 * All possible modes should be defined by a code space. 	 * A default code space is defined by this specification	 * ‘urn:ogc:def:dictionary:CEOS:eop:SpectralModes’	 * and should be used when applicable	 */	private String instrumentMode = null;		/** PolarizationMode :	 * Receive/Transmit polarization mode of a SAR instrument. 	 * A default codespace is defined by this specification	 * ‘urn:ogc:def:dictionary:CEOS:sar:PolarizationModes’	 * and should be used when applicable.	 */	/** groundResolutionRange :	 * Distance between two contiguous pixels of remote	 * sensed imagery when projected on the earth. The	 * type of this parameter is a QuantityRange,	 * allowing the user to specify a range of acceptable	 * ground resolutions.	 */	/** Ground Resolution min */	private double groundResolutionMin = 0;		/** Ground Resolution max */	private double groundResolutionMax = 0;	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public AcquisitionParametersBean() {	}	/** getters */	/** 	 * getter on fusionAccepted	 * 	 * @return boolean : true if fusion ids accepted	*/	public boolean getFusionAccepted() {		return this.fusionAccepted;	}		/** 	 * getter on instrumentMode	 * 	 * @return String : instrument Mode	*/	public String getInstrumentMode() {		return (this.instrumentMode != null) ? this.instrumentMode : "";	}		/** 	 * getter on groundResolutionMin	 * 	 * @return double : ground Resolution Min	*/	public double getGroundResolutionMin() {		return this.groundResolutionMin;	}	/** 	 * getter on groundResolutionMax	 * 	 * @return double : ground Resolution Max	*/	public double getGroundResolutionMax() {		return this.groundResolutionMax;	}	/** setters */	/** 	 * setter on fusionAccepted	 * 	 * @param _fusionAccepted (boolean): fusion accepted value	*/	public void setFusionAccepted(boolean _fusionAccepted) {		this.fusionAccepted = _fusionAccepted;	}		/** 	 * setter on instrumentMode	 * 	 * @param _instrumentMode (String): instrument Mode value	*/	public void setInstrumentMode(String _instrumentMode) {		this.instrumentMode = _instrumentMode;	}		/** 	 * setter on groundResolutionMin	 * 	 * @param _groundResolutionMin (double): ground resolution min value	*/	public void setGroundResolutionMin(double _groundResolutionMin) {		this.groundResolutionMin = _groundResolutionMin;	}	/** 	 * setter on groundResolutionMax	 * 	 * @param _groundResolutionMax (double): ground resolution max value	*/	public void setGroundResolutionMax(double _groundResolutionMax) {		this.groundResolutionMax = _groundResolutionMax;	}} // class