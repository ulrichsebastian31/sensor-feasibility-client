package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)IncidenceAngleRangeBean.java	 1.0  20/04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 20/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * Acquisition Type informations : * The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * </P> * </P> <BR> *  * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> *  * @author  GR * @version 1.0, le 20/04/2010 */public class IncidenceAngleRangeBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 8192533053193896742L;	/** 	 * incidence angle range : azimuth range and elevation range	 * Specification of allowed acquisition angles in terms of angles expressed relative to a	 * frame of reference attached to the location of the acquisition (i.e. on the ground).		 */		/**	 * Azimuth Range :	 * Range of acceptable azimuth incidence angles. 	 * The azimuth angle is the angle that the look vector (projected vertically on the earth surface) 	 * makes with the north direction. It thus indicates from which geographic direction (i.e. North, East, West,	 * South) the region of interest should be imaged.	 */		/** azimuth incidence min (deg) */	private double azimuthIncidenceMin = 0;		/** azimuth incidence max (deg) */	private double azimuthIncidenceMax = 0;	/**	 * Elevation Range :	 * 	 * Range of acceptable elevation incidence angles. 	 * The elevation angle is the angle that the look vector makes	 * with the local vertical. It thus indicates how vertically the region should be imaged.	 * This is the traditional meaning of incidence angle	 */		/** Elevation incidence min (deg) */	private double elevationIncidenceMin = 0;		/** Elevation incidence max (deg) */	private double elevationIncidenceMax = 0;	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public IncidenceAngleRangeBean() {	}	/** getters */		/** 	 * getter on azimuthIncidenceMin (deg)	 * 	 * @return double : azimuth Incidence Min	*/	public double getAzimuthIncidenceMin() {		return this.azimuthIncidenceMin;	}	/** 	 * getter on azimuthIncidenceMax (deg)	 * 	 * @return double : azimuth Incidence Max	*/	public double getAzimuthIncidenceMax() {		return this.azimuthIncidenceMax;	}	/** 	 * getter on elevationIncidenceMin (deg)	 * 	 * @return double : elevation Incidence Min	*/	public double getElevationIncidenceMin() {		return this.elevationIncidenceMin;	}	/** 	 * getter on elevationIncidenceMax (deg)	 * 	 * @return double : elevation Incidence Max	*/	public double getElevationIncidenceMax() {		return this.elevationIncidenceMax;	}		/** setters */	/**  acquisition angle : Azimuth Range ane Elevation Range */	/** 	 * setter on azimuthIncidenceMin (deg)	 * 	 * @param _azimuthIncidenceMin (double): azimuth incidence min value	*/	public void setAzimuthIncidenceMin(double _azimuthIncidenceMin) {		this.azimuthIncidenceMin = _azimuthIncidenceMin;	}	/** 	 * setter on azimuthIncidenceMax (deg)	 * 	 * @param _azimuthIncidenceMax (double): azimuth incidence max value	*/	public void setAzimuthIncidenceMax(double _azimuthIncidenceMax) {		this.azimuthIncidenceMax = _azimuthIncidenceMax;	}	/** 	 * setter on elevationIncidenceMin (deg)	 * 	 * @param _elevationIncidenceMin (double): elevation incidence min value	*/	public void setElevationIncidenceMin(double _elevationIncidenceMin) {		this.elevationIncidenceMin = _elevationIncidenceMin;	}	/** 	 * setter on elevationIncidenceMax (deg)	 * 	 * @param _elevationIncidenceMax (double): elevation incidence max value	*/	public void setElevationIncidenceMax(double _elevationIncidenceMax) {		this.elevationIncidenceMax = _elevationIncidenceMax;	}	} // class