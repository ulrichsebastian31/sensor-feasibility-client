package com.astrium.faceo.client.bean.programming.sps2.request;/* * @(#)AcquisitionAngleRangeBean.java	 1.0  20/04/2010 * * * PROJET       : SITE FACEO * * LANGUAGE     : Java * * DESCRIPTION  : The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * * CREATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * | 20/04/2010 |    1.0  |                                            | * --------------------------------------------------------------------- * * MODIFICATION : * --------------------------------------------------------------------- * | Date       | Version | Description                                | * --------------------------------------------------------------------- * |            |         |                                            | * --------------------------------------------------------------------- * *//* * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> */// importimport java.io.Serializable;/** * <B>SITE FACEO</B> <BR> *  * <P> * Acquisition Type informations : * The AcquisitionType class is used to specify if the acquisition is monoscopic or * stereoscopic, as well as contain specific acquisition parameters. * </P> * </P> <BR> *  * sample of Acquisition type for GetFeasibility Request *  *   <eo:AcquisitionType> *       <eo:MonoscopicAcquisition> *            <eo:CoverageType>MULTIPASS</eo:CoverageType> *            <eo:IncidenceAngle> *               <eo:Azimuth> *                  <eo:min>-180.0</eo:min> *                  <eo:max>180.0</eo:max> *               </eo:Azimuth> *               <eo:Elevation> *                  <eo:min>0.0</eo:min> *                  <eo:max>15.0</eo:max> *               </eo:Elevation> *            </eo:IncidenceAngle> *            <eo:AcquisitionParametersOPT> *               <eo:GroundResolution> *                  <eo:min>2.5</eo:min> *                  <eo:max>10.0</eo:max> *               </eo:GroundResolution> *               <eo:InstrumentMode>PANCHROMATIC</eo:InstrumentMode> *               <eo:FusionAccepted>false</eo:FusionAccepted> *            </eo:AcquisitionParametersOPT> *       </eo:MonoscopicAcquisition> *   </eo:AcquisitionType> *  * @author  GR * @version 1.0, le 20/04/2010 */public class AcquisitionAngleRangeBean implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 8192533053193896742L;	/** 	 * acquisition angle : 	 *           choice : incidence angle range or pointing angle range	 * Acceptable acquisition angles can be specified either by indicating a range of incidence	 * angles (i.e. the angle with which the look vector intersects the earth surface) or a range of	 * pointing angles (i.e. the angle of the look vector in the nadir oriented frame of reference	 * attached to the satellite).	 */		/** 	 * incidence angle range : azimuth range and elevation range	 * Specification of allowed acquisition angles in terms of angles expressed relative to a	 * frame of reference attached to the location of the acquisition (i.e. on the ground).		 */		/**	 * Azimuth Range :	 * Range of acceptable azimuth incidence angles. 	 * The azimuth angle is the angle that the look vector (projected vertically on the earth surface) 	 * makes with the north direction. It thus indicates from which geographic direction (i.e. North, East, West,	 * South) the region of interest should be imaged.	 */		/**	 * Elevation Range :	 * 	 * Range of acceptable elevation incidence angles. 	 * The elevation angle is the angle that the look vector makes	 * with the local vertical. It thus indicates how vertically the region should be imaged.	 * This is the traditional meaning of incidence angle	 */		/** Incidence Angle Range (deg) */	private IncidenceAngleRangeBean incidenceAngleRange = new IncidenceAngleRangeBean();	/**	 * Pointing Angle Range : Along Track Range and across Track range	 * Specification of allowed acquisition angles in terms of angles expressed in the satellite	 * reference frame and relative to the nadir direction.	 */		/**	 * AlongTrackRange :	 * Range of acceptable pointing angles in the along track direction (i.e. the angle	 * between the nadir direction and the look vector, measured around the axis	 * of the satellite reference frame that is orthogonal to the orbit plane)	 */	/** Pointing Angle Range (deg) */	private PointingAngleRangeBean pointingAngleRange = new PointingAngleRangeBean();	/**	 * debut des methodes	 	 * 	 * Constructeur par defaut : vide	 */	public AcquisitionAngleRangeBean() {	}	/** getters */		/**  acquisition angle : Azimuth Range ane Elevation Range */		// ---------------- Incidence Angle Range ---------------------	/** 	 * getter on incidenceAngleRange (deg)	 * 	 * @return IncidenceAngleRangeBean : incidence Angle Range	*/	public IncidenceAngleRangeBean getIncidenceAngleRange() {		return this.incidenceAngleRange;	}	// ---------------- Pointing Angle Range ---------------------		/** 	 * getter on pointingAngleRange (deg)	 * 	 * @return PointingAngleRangeBean : pointing Angle Range	*/	public PointingAngleRangeBean getPointingAngleRange() {		return this.pointingAngleRange;	}		/** setters */	// ---------------- Incidence Angle Range ---------------------	/**  incidence Angle : Azimuth Range and Elevation Range */	/** 	 * setter on incidenceAngleRange (deg)	 * 	 * @param _incidenceAngleRange (IncidenceAngleRangeBean): incidence Angle Range value	*/	public void setIncidenceAngleRange(IncidenceAngleRangeBean _incidenceAngleRange) {		this.incidenceAngleRange = _incidenceAngleRange;	}	// ---------------- Pointing Angle Range ---------------------	/** 	 * setter on pointingAngleRange (deg)	 * 	 * @param _pointingAngleRange (PointingAngleRangeBean): pointing Angle Range value	*/	public void setPointingAngleRange(PointingAngleRangeBean _pointingAngleRange) {		this.pointingAngleRange = _pointingAngleRange;	}} // class